---
# Prerequisites using native oc commands instead of kubernetes modules
# This is a fallback approach when kubernetes Python libraries are not available

- name: Verify OpenShift cluster access using oc command
  shell: oc get nodes
  register: cluster_nodes_output
  changed_when: false
  failed_when: cluster_nodes_output.rc != 0

- name: Display cluster nodes
  debug:
    var: cluster_nodes_output.stdout_lines

- name: Create NMState operator namespace using oc
  shell: |
    oc apply -f - <<EOF
    apiVersion: v1
    kind: Namespace
    metadata:
      labels:
        kubernetes.io/metadata.name: openshift-nmstate
        name: openshift-nmstate
      name: openshift-nmstate
    spec:
      finalizers:
      - kubernetes
    EOF
  register: nmstate_ns_result
  changed_when: "'created' in nmstate_ns_result.stdout or 'configured' in nmstate_ns_result.stdout"

- name: Create NMState OperatorGroup using oc
  shell: |
    oc apply -f - <<EOF
    apiVersion: operators.coreos.com/v1
    kind: OperatorGroup
    metadata:
      annotations:
        olm.providedAPIs: NMState.v1.nmstate.io
      name: openshift-nmstate
      namespace: openshift-nmstate
    spec:
      targetNamespaces:
      - openshift-nmstate
    EOF
  register: nmstate_og_result
  changed_when: "'created' in nmstate_og_result.stdout or 'configured' in nmstate_og_result.stdout"

- name: Verify NMState OperatorGroup is created
  shell: oc get operatorgroup -n openshift-nmstate
  register: nmstate_og_check
  until: nmstate_og_check.rc == 0
  retries: 10
  delay: 5
  changed_when: false

- name: Create NMState Subscription using oc
  shell: |
    oc apply -f - <<EOF
    apiVersion: operators.coreos.com/v1alpha1
    kind: Subscription
    metadata:
      labels:
        operators.coreos.com/kubernetes-nmstate-operator.openshift-nmstate: ""
      name: kubernetes-nmstate-operator
      namespace: openshift-nmstate
    spec:
      channel: stable
      installPlanApproval: Automatic
      name: kubernetes-nmstate-operator
      source: redhat-operators
      sourceNamespace: openshift-marketplace
    EOF
  register: nmstate_sub_result
  changed_when: "'created' in nmstate_sub_result.stdout or 'configured' in nmstate_sub_result.stdout"

- name: Wait for NMState operator to be ready
  shell: oc get clusterserviceversion -n openshift-nmstate --no-headers | grep Succeeded
  register: nmstate_csv_check
  until: nmstate_csv_check.rc == 0
  retries: 60
  delay: 10
  changed_when: false

- name: Wait for NMState CRD to be available
  shell: oc get crd nmstates.nmstate.io
  register: nmstate_crd_check
  until: nmstate_crd_check.rc == 0
  retries: 30
  delay: 10
  changed_when: false

- name: Create NMState instance using oc (with retries)
  shell: |
    oc apply -f - <<EOF
    apiVersion: nmstate.io/v1
    kind: NMState
    metadata:
      name: nmstate
    EOF
  register: nmstate_instance_result
  until: nmstate_instance_result.rc == 0
  retries: 5
  delay: 10
  changed_when: "'created' in nmstate_instance_result.stdout or 'configured' in nmstate_instance_result.stdout"

- name: Verify NMState instance is created
  shell: oc get nmstate nmstate
  register: nmstate_verify
  until: nmstate_verify.rc == 0
  retries: 10
  delay: 5
  changed_when: false

- name: Create MetalLB operator namespace using oc
  shell: |
    oc apply -f - <<EOF
    apiVersion: v1
    kind: Namespace
    metadata:
      name: metallb-system
    EOF
  register: metallb_ns_result
  changed_when: "'created' in metallb_ns_result.stdout or 'configured' in metallb_ns_result.stdout"

- name: Create MetalLB OperatorGroup using oc
  shell: |
    oc apply -f - <<EOF
    apiVersion: operators.coreos.com/v1
    kind: OperatorGroup
    metadata:
      name: metallb-operator
      namespace: metallb-system
    EOF
  register: metallb_og_result
  changed_when: "'created' in metallb_og_result.stdout or 'configured' in metallb_og_result.stdout"

- name: Verify MetalLB OperatorGroup is created
  shell: oc get operatorgroup -n metallb-system
  register: metallb_og_check
  until: metallb_og_check.rc == 0
  retries: 10
  delay: 5
  changed_when: false

- name: Create MetalLB Subscription using oc
  shell: |
    oc apply -f - <<EOF
    apiVersion: operators.coreos.com/v1alpha1
    kind: Subscription
    metadata:
      name: metallb-operator-sub
      namespace: metallb-system
    spec:
      channel: stable
      name: metallb-operator
      source: redhat-operators
      sourceNamespace: openshift-marketplace
    EOF
  register: metallb_sub_result
  changed_when: "'created' in metallb_sub_result.stdout or 'configured' in metallb_sub_result.stdout"

- name: Wait for MetalLB operator to be ready
  shell: oc get clusterserviceversion -n metallb-system --no-headers | grep Succeeded
  register: metallb_csv_check
  until: metallb_csv_check.rc == 0
  retries: 60
  delay: 10
  changed_when: false

- name: Wait for MetalLB CRD to be available
  shell: oc get crd metallbs.metallb.io
  register: metallb_crd_check
  until: metallb_crd_check.rc == 0
  retries: 30
  delay: 10
  changed_when: false

- name: Create MetalLB instance using oc (with retries)
  shell: |
    oc apply -f - <<EOF
    apiVersion: metallb.io/v1beta1
    kind: MetalLB
    metadata:
      name: metallb
      namespace: metallb-system
    spec:
      nodeSelector:
        node-role.kubernetes.io/worker: ""
    EOF
  register: metallb_instance_result
  until: metallb_instance_result.rc == 0
  retries: 5
  delay: 10
  changed_when: "'created' in metallb_instance_result.stdout or 'configured' in metallb_instance_result.stdout"

- name: Verify MetalLB instance is created
  shell: oc get metallb metallb -n metallb-system
  register: metallb_verify
  until: metallb_verify.rc == 0
  retries: 10
  delay: 5
  changed_when: false

- name: Wait for MetalLB controller deployment to be ready
  shell: oc get deployment -n metallb-system controller -o jsonpath='{.status.readyReplicas}'
  register: metallb_controller_check
  until: metallb_controller_check.stdout | int >= 1
  retries: 30
  delay: 10
  changed_when: false

- name: Wait for MetalLB speaker daemonset to be ready
  shell: oc get daemonset -n metallb-system speaker -o jsonpath='{.status.numberReady}'
  register: metallb_speaker_check
  until: metallb_speaker_check.stdout | int > 0
  retries: 30
  delay: 10
  changed_when: false

- name: Verify cert-manager is installed and running
  shell: oc get pods -n cert-manager --no-headers | grep Running | wc -l
  register: cert_manager_check
  until: cert_manager_check.stdout | int > 0
  retries: 30
  delay: 10
  changed_when: false

- name: Display cert-manager status
  debug:
    msg: "cert-manager pods running: {{ cert_manager_check.stdout }}"
